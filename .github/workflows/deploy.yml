name: Release CI

on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  create-release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Query version number
        id: get_version
        shell: bash
        run: |
          echo "using version tag ${GITHUB_REF:10}"
          echo "version=${GITHUB_REF:10}" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: '${{ env.version }}'
          release_name: 'ChatGPT ${{ env.version }}'
          body: 'See the assets to download this version and install.'

  build-tauri:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 40
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - build: linux
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
          - build: linux
            os: ubuntu-latest
            rust: stable
            target: aarch64-unknown-linux-gnu
          - build: macos
            os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
          - buid: macos
            os: macos-latest
            rust: stable
            target: aarch64-apple-darwin
          - build: windows
            os: windows-latest
            rust: stable
            target: x86_64-pc-windows-msvc

    steps:
      - uses: actions/checkout@v3

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: 7
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: pnpm
      - run: pnpm install --frozen-lockfile

      - name: 'Setup Rust'
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        # sudo apt-get install -y libwebkit2gtk-4.0-dev build-essential libayatana-appindicator3-dev librsvg2-dev libgtk-3-dev libsoup2.4-dev libjavascriptcoregtk-4.0-dev
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev build-essential libssl-de libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Build
        run: pnpm build:fe

      - name: Install rust target
        run: rustup target add ${{ matrix.target }}

      - name: fix tray icon
        if: matrix.platform != 'macos-latest'
        run: |
          pnpm fix:tray

      - run: pnpm build --target ${{ matrix.target }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      - uses: actions/upload-artifact@v3
        if: matrix.target == 'aarch64-apple-darwin'
        with:
          name: chatgpt-macos-aarch64
          path: ./target/aarch64-apple-darwin/release/bundle/macos/ChatGPT.app.tar.*

      - uses: actions/upload-artifact@v3
        if: matrix.target == 'x86_64-apple-darwin'
        with:
          name: chatgpt-macos-x86_64
          path: ./target/x86_64-apple-darwin/release/bundle/macos/ChatGPT.app.tar.*

      # target\x86_64-pc-windows-msvc\release\bundle/msi/TauriApp_0.0.0_x64_en-US.msi
      - uses: actions/upload-artifact@v3
        if: matrix.platform == 'windows-latest'
        with:
          name: chatgpt-windows
          path: ./target/x86_64-pc-windows-msvc/release/bundle/msi/ChatGPT_**.msi.zip.*

      - uses: actions/upload-artifact@v3
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        with:
          name: chatgpt-linux-x86_64
          path: |
            ./target/x86_64-unknown-linux-gnu/release/bundle/appimage/chat-gpt_**.deb
            ./target/x86_64-unknown-linux-gnu/release/bundle/appimage/chat-gpt_**.AppImage.tar.*

      - uses: actions/upload-artifact@v3
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        with:
          name: chatgpt-linux-aarch64
          path: |
            ./target/aarch64-unknown-linux-gnu/release/bundle/appimage/chat-gpt_**.deb
            ./target/aarch64-unknown-linux-gnu/release/bundle/appimage/chat-gpt_**.AppImage.tar.*

  updater:
    runs-on: ubuntu-latest
    needs: [create-release, build-tauri]

    steps:
      - uses: actions/checkout@v3

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: 7
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: pnpm
      - run: pnpm install --frozen-lockfile

      - run: pnpm updater --token=${{ secrets.GITHUB_TOKEN }}

      - name: Deploy install.json
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./updater
          # force_orphan: true

  # publish-winget:
  #   # Action can only be run on windows
  #   runs-on: windows-latest
  #   needs: [create-release, build-tauri]
  #   steps:
  #     - uses: vedantmgoyal2009/winget-releaser@v1
  #       with:
  #         identifier: lencx.ChatGPT
  #         token: ${{ secrets.WINGET_TOKEN }}
  #         version: ${{ env.version }}
